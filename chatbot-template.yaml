AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Chatbot with Static Website"

Resources:
  # 1. S3 Bucket for documents
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-documents-${AWS::AccountId}"
      AccessControl: Private

  # 2. Static website bucket
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-website-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false

  # 3. Website bucket policy
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: ["s3:GetObject"]
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

  # 4. Lambda function
  ChatbotLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-processor"
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref DocumentsBucket
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          from langchain_community.document_loaders import S3FileLoader
          from langchain_text_splitters import RecursiveCharacterTextSplitter

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  # Check for existing chunks first
                  try:
                      response = s3.get_object(
                          Bucket=os.environ['BUCKET_NAME'],
                          Key='chunks/processed.json'
                      )
                      return {
                          'statusCode': 200,
                          'body': json.loads(response['Body'].read())
                      }
                  except s3.exceptions.NoSuchKey:
                      # Process and store chunks if not found
                      loader = S3FileLoader(os.environ['BUCKET_NAME'], 'input.txt')
                      splitter = RecursiveCharacterTextSplitter(chunk_size=2000)
                      chunks = splitter.split_documents(loader.load())
                      
                      chunk_data = {
                          'chunks': [chunk.page_content for chunk in chunks],
                          'metadata': str(chunks[0].metadata) if chunks else None
                      }
                      
                      s3.put_object(
                          Bucket=os.environ['BUCKET_NAME'],
                          Key='chunks/processed.json',
                          Body=json.dumps(chunk_data)
                      )
                      
                      return {
                          'statusCode': 200,
                          'body': chunk_data
                      }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': str(e)
                  }

  # 5. API Gateway
  ChatbotAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      Description: "Chatbot API Gateway"

  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatbotAPI
      ParentId: !GetAtt ChatbotAPI.RootResourceId
      PathPart: "chat"

  APIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatbotAPI
      ResourceId: !Ref APIResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - LambdaArn: !GetAtt ChatbotLambda.Arn

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: APIMethod
    Properties:
      RestApiId: !Ref ChatbotAPI
      StageName: prod

  # 6. Lambda permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ["s3:GetObject", "s3:PutObject"]
                Resource: !Sub "arn:aws:s3:::${DocumentsBucket}/*"
        - PolicyName: BasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ]
                Resource: "*"

  # 7. Website deployment
  WebsiteDeployment:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-deployer"
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              s3.put_object(
                  Bucket='${WebsiteBucket}',
                  Key='index.html',
                  Body='''<!DOCTYPE html>
                  <html>
                  <head>
                      <title>AWS Chatbot</title>
                      <style>/* Your CSS here */</style>
                  </head>
                  <body>
                      <div id="chat-container">
                          <h1>Document Chatbot</h1>
                          <div id="chat-messages"></div>
                          <input id="user-input" placeholder="Ask about the document...">
                          <button onclick="sendMessage()">Send</button>
                      </div>
                      <script>
                          const API_URL = 'https://${ChatbotAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/chat';
                          async function sendMessage() {
                              const input = document.getElementById('user-input').value;
                              if (!input) return;
                              
                              addMessage("You", input);
                              document.getElementById('user-input').value = "";
                              
                              try {
                                  const response = await fetch(API_URL, {
                                      method: 'POST',
                                      headers: { 'Content-Type': 'application/json' },
                                      body: JSON.stringify({ question: input })
                                  });
                                  const data = await response.json();
                                  addMessage("Bot", data.answer);
                              } catch (error) {
                                  addMessage("System", "Error connecting to chatbot");
                              }
                          }
                          
                          function addMessage(sender, text) {
                              const chatDiv = document.getElementById('chat-messages');
                              chatDiv.innerHTML += `<div><b>${sender}:</b> ${text}</div>`;
                              chatDiv.scrollTop = chatDiv.scrollHeight;
                          }
                      </script>
                  </body>
                  </html>''',
                  ContentType: 'text/html'
              )
      Timeout: 30

Outputs:
  WebsiteURL:
    Description: "URL of your static website"
    Value: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
  APIEndpoint:
    Description: "Chatbot API endpoint"
    Value: !Sub "https://${ChatbotAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/chat"
  DocumentsBucketName:
    Description: "Bucket for uploading documents"
    Value: !Ref DocumentsBucket
